services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: sms_agent_database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-sms_agent_db}
      POSTGRES_USER: ${DATABASE_USER:-sms_agent}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d/
    networks:
      - sms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-sms_agent} -d ${DATABASE_NAME:-sms_agent_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web Application
  web:
    build: .
    container_name: enhanced_sms_agent
    ports:
      - "5001:8000" # Expose container port 8000 to host port 5001
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./media:/app/media
      - ./static:/app/staticfiles
    environment:
      - DJANGO_SETTINGS_MODULE=sms_agent.settings
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    depends_on:
      database:
        condition: service_healthy
    networks:
      - sms_network

  # Ngrok for webhook tunneling
  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok_for_sms_agent
    ports:
      - "4040:4040"
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    command: http web:8000 --domain=${NGROK_DOMAIN} --log=stdout --log-format=json
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - sms_network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: sms_agent_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - sms_network
    command: redis-server --appendonly yes

networks:
  sms_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  logs: 
  data: 