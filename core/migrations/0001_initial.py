# Generated by Django 5.0.3 on 2025-07-20 23:01

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('phone_number', models.CharField(help_text='Primary phone number for the user', max_length=17, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('tier', models.CharField(choices=[('free', 'Free'), ('premium', 'Premium'), ('enterprise', 'Enterprise')], default='free', help_text='User subscription tier', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='User email address', max_length=255, null=True)),
                ('full_name', models.CharField(blank=True, help_text='User full name', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Account creation timestamp')),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now, help_text='Last activity timestamp')),
                ('total_requests', models.IntegerField(default=0, help_text='Total number of requests made')),
                ('monthly_requests', models.IntegerField(default=0, help_text='Requests made this month')),
                ('rate_limit_reset', models.DateTimeField(default=django.utils.timezone.now, help_text='When rate limit resets')),
                ('timezone', models.CharField(default='UTC', help_text='User timezone', max_length=50)),
                ('preferences', models.JSONField(blank=True, default=dict, help_text='User preferences stored as JSON')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['-last_active'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('sms_content', models.TextField(help_text='Original SMS content')),
                ('ai_response', models.TextField(blank=True, help_text='AI-generated response', null=True)),
                ('category', models.CharField(choices=[('general', 'General'), ('support', 'Support'), ('information', 'Information'), ('emergency', 'Emergency'), ('automated', 'Automated')], default='general', help_text='Task category', max_length=50)),
                ('processing_time', models.FloatField(default=0.0, help_text='Processing time in seconds')),
                ('tokens_used', models.IntegerField(default=0, help_text='Number of tokens used for AI processing')),
                ('complexity_score', models.FloatField(default=1.0, help_text='Complexity score of the task')),
                ('success', models.BooleanField(default=True, help_text='Whether the task was successful')),
                ('error_message', models.TextField(blank=True, help_text='Error message if task failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Task creation timestamp')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Task completion timestamp', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional task metadata')),
                ('user_phone', models.ForeignKey(help_text='User who initiated the task', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='core.user')),
            ],
            options={
                'db_table': 'tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('error_type', models.CharField(choices=[('sms_error', 'SMS Error'), ('ai_error', 'AI Processing Error'), ('database_error', 'Database Error'), ('api_error', 'API Error'), ('validation_error', 'Validation Error'), ('rate_limit_error', 'Rate Limit Error'), ('system_error', 'System Error')], help_text='Type of error', max_length=50)),
                ('error_message', models.TextField(help_text='Detailed error message')),
                ('stack_trace', models.TextField(blank=True, help_text='Stack trace for debugging', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the error occurred')),
                ('resolved', models.BooleanField(default=False, help_text='Whether the error has been resolved')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional error metadata')),
                ('task', models.ForeignKey(blank=True, help_text='Task associated with the error (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='error_logs', to='core.task')),
                ('user_phone', models.ForeignKey(blank=True, help_text='User associated with the error (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='error_logs', to='core.user')),
            ],
            options={
                'db_table': 'error_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['user_phone', '-created_at'], name='tasks_user_ph_62b94e_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['category', '-created_at'], name='tasks_categor_a612a8_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['success', '-created_at'], name='tasks_success_8a83f1_idx'),
        ),
        migrations.AddIndex(
            model_name='errorlog',
            index=models.Index(fields=['error_type', '-timestamp'], name='error_logs_error_t_e8f583_idx'),
        ),
        migrations.AddIndex(
            model_name='errorlog',
            index=models.Index(fields=['user_phone', '-timestamp'], name='error_logs_user_ph_f59ef3_idx'),
        ),
        migrations.AddIndex(
            model_name='errorlog',
            index=models.Index(fields=['resolved', '-timestamp'], name='error_logs_resolve_b97978_idx'),
        ),
    ]
